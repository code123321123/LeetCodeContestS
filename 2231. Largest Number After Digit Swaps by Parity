2231. Largest Number After Digit Swaps by Parity:


You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).

Return the largest possible value of num after any number of swaps.

 

Example 1:

Input: num = 1234
Output: 3412
Explanation: Swap the digit 3 with the digit 1, this results in the number 3214.
Swap the digit 2 with the digit 4, this results in the number 3412.
Note that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.
Also note that we may not swap the digit 4 with the digit 1 since they are of different parities.
Example 2:

Input: num = 65875
Output: 87655
Explanation: Swap the digit 8 with the digit 6, this results in the number 85675.
Swap the first digit 5 with the digit 7, this results in the number 87655.
Note that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.::








======================================================================================================================================================
SOLUTION Approach
======================================================================================================================================================
Basically here in the gien problem we just have to swap the position of the eve place and odd place so that maximum number will be formed .
There are so many method i am going to touch the Priority queue technique.

create two Priority queue to store odd and even number ... 
then again form the digit by poping the element from priority queue if current element is od or even.



CODE:-
class Solution {
public:
    int largestInteger(int nums) {

        priority_queue<int>even;
        priority_queue<int>odd;
        string str=to_string(nums);
        int n=str.size();
        for(int i=0;i<n;i++)
        {
            if((str[i]-'0')%2==0)
            {
                even.push(str[i]-'0');
            }
            else
            {
                odd.push(str[i]-'0');
            }
        }
        
        int ans=0;
        for(int i=0;i<n;i++)
        {
            ans*=10;
            if((str[i]-'0')%2)
            {
                ans+=odd.top();
                odd.pop();
            }
            else
            {
                ans+=even.top();
                even.pop();
            }
        }
        return ans;
        
        
        
    }
};




